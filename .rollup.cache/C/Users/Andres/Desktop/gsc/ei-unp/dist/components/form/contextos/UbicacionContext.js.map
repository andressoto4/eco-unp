{"version":3,"file":"UbicacionContext.js","sourceRoot":"","sources":["../../../../src/components/form/contextos/UbicacionContext.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,QAAQ,EAAa,MAAM,OAAO,CAAC;AAQ9E,uDAAuD;AACvD,MAAM,sBAAsB,GAAG,aAAa,CAAgB;IAC1D,EAAE,EAAE,GAAG;IACP,KAAK,EAAE,GAAG,EAAE,GAAE,CAAC;CAChB,CAAC,CAAC;AACH,MAAM,8BAA8B,GAAG,aAAa,CAAgB;IAClE,EAAE,EAAE,GAAG;IACP,KAAK,EAAE,GAAG,EAAE,GAAE,CAAC;CAChB,CAAC,CAAC;AACH,MAAM,2BAA2B,GAAG,aAAa,CAAgB;IAC/D,EAAE,EAAE,GAAG;IACP,KAAK,EAAE,GAAG,EAAE,GAAE,CAAC;CAChB,CAAC,CAAC;AACH,MAAM,sBAAsB,GAAG,aAAa,CAAgB;IAC1D,EAAE,EAAE,GAAG;IACP,KAAK,EAAE,GAAG,EAAE,GAAE,CAAC;CAChB,CAAC,CAAC;AAMH,8BAA8B;AAC9B,MAAM,iBAAiB,GAAqC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC3E,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,QAAQ,CAAS,GAAG,CAAC,CAAC;IACpE,MAAM,CAAC,uBAAuB,EAAE,0BAA0B,CAAC,GAAG,QAAQ,CAAS,GAAG,CAAC,CAAC;IACpF,MAAM,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,GAAG,QAAQ,CAAS,GAAG,CAAC,CAAC;IAC9E,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,QAAQ,CAAS,GAAG,CAAC,CAAC;IAEpE,OAAO,CACL,oBAAC,sBAAsB,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,kBAAkB,EAAE;QACxF,oBAAC,8BAA8B,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,EAAE,EAAE,uBAAuB,EAAE,KAAK,EAAE,0BAA0B,EAAE;YAChH,oBAAC,2BAA2B,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,EAAE,EAAE,oBAAoB,EAAE,KAAK,EAAE,uBAAuB,EAAE;gBACvG,oBAAC,sBAAsB,CAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,EAAE,EAAE,eAAe,EAAE,KAAK,EAAE,kBAAkB,EAAE,IACvF,QAAQ,CACuB,CACG,CACC,CACV,CACnC,CAAC;AACJ,CAAC,CAAC;AAEF,gCAAgC;AAChC,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;AACpE,MAAM,0BAA0B,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC;AACpF,MAAM,uBAAuB,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,2BAA2B,CAAC,CAAC;AAC9E,MAAM,kBAAkB,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;AAEpE,OAAO,EAAE,iBAAiB,EAAE,CAAC;AAC7B,OAAO,EAAE,kBAAkB,EAAE,0BAA0B,EAAE,uBAAuB,EAAE,kBAAkB,EAAE,CAAC;AACvG,OAAO,EAAE,sBAAsB,EAAE,8BAA8B,EAAE,2BAA2B,EAAE,sBAAsB,EAAE,CAAC","sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from \"react\";\r\n\r\n// Definir interfaces para los contextos\r\ninterface IdContextType {\r\n  id: string;\r\n  setID: (value: string) => void;\r\n}\r\n\r\n// Crear contextos individuales con valores por defecto\r\nconst IdPaisUbicacionContext = createContext<IdContextType>({\r\n  id: '0',\r\n  setID: () => {},\r\n});\r\nconst IdDepartamentoUbicacionContext = createContext<IdContextType>({\r\n  id: '0',\r\n  setID: () => {},\r\n});\r\nconst IdMunicipioUbicacionContext = createContext<IdContextType>({\r\n  id: '0',\r\n  setID: () => {},\r\n});\r\nconst IdZonaUbicacionContext = createContext<IdContextType>({\r\n  id: '0',\r\n  setID: () => {},\r\n});\r\n\r\ninterface UbicacionProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n// Crear un provider combinado\r\nconst UbicacionProvider: React.FC<UbicacionProviderProps> = ({ children }) => {\r\n  const [idPaisUbicacion, setIDPaisUbicacion] = useState<string>('0');\r\n  const [idDepartamentoUbicacion, setIDDepartamentoUbicacion] = useState<string>('0');\r\n  const [idMunicipioUbicacion, setIDMunicipioUbicacion] = useState<string>('0');\r\n  const [idZonaUbicacion, setIdZonaUbicacion] = useState<string>('0');\r\n\r\n  return (\r\n    <IdPaisUbicacionContext.Provider value={{ id: idPaisUbicacion, setID: setIDPaisUbicacion }}>\r\n      <IdDepartamentoUbicacionContext.Provider value={{ id: idDepartamentoUbicacion, setID: setIDDepartamentoUbicacion }}>\r\n        <IdMunicipioUbicacionContext.Provider value={{ id: idMunicipioUbicacion, setID: setIDMunicipioUbicacion }}>\r\n          <IdZonaUbicacionContext.Provider value={{ id: idZonaUbicacion, setID: setIdZonaUbicacion }}>\r\n            {children}\r\n          </IdZonaUbicacionContext.Provider>\r\n        </IdMunicipioUbicacionContext.Provider>\r\n      </IdDepartamentoUbicacionContext.Provider>\r\n    </IdPaisUbicacionContext.Provider>\r\n  );\r\n};\r\n\r\n// Hooks para usar los contextos\r\nconst useIdPaisUbicacion = () => useContext(IdPaisUbicacionContext);\r\nconst useIdDepartamentoUbicacion = () => useContext(IdDepartamentoUbicacionContext);\r\nconst useIdMunicipioUbicacion = () => useContext(IdMunicipioUbicacionContext);\r\nconst useIdZonaUbicacion = () => useContext(IdZonaUbicacionContext);\r\n\r\nexport { UbicacionProvider };\r\nexport { useIdPaisUbicacion, useIdDepartamentoUbicacion, useIdMunicipioUbicacion, useIdZonaUbicacion };\r\nexport { IdPaisUbicacionContext, IdDepartamentoUbicacionContext, IdMunicipioUbicacionContext, IdZonaUbicacionContext };"]}