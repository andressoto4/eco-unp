{"version":3,"file":"InicioSesionHook.js","sourceRoot":"","sources":["../../../../src/components/ui/hooks/InicioSesionHook.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport { InicioSesionRequest } from '../request/InicisoSesionRequest';\r\n\r\nexport const InicioSesionHook = (maxAttempts: number, blockTime: number) => {\r\n    \r\n    const [recaptchaToken, setRecaptchaToken] = useState<string | null>(null);\r\n    const [validated, setValidated] = useState<boolean>(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [attempts, setAttempts] = useState<number>(0);\r\n    const [isBlocked, setIsBlocked] = useState<boolean>(false);\r\n    const [timer, setTimer] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n        let interval: NodeJS.Timeout | undefined;\r\n    \r\n        // Si el usuario está bloqueado y el temporizador es mayor que 0\r\n        if (isBlocked && timer > 0) {\r\n            // Configura un intervalo que decrementa el temporizador en 1 cada segundo\r\n            interval = setInterval(() => {\r\n                setTimer((prevTimer) => prevTimer - 1);\r\n            }, 1000);\r\n        }\r\n    \r\n        // Si el temporizador llega a 0 y el usuario está bloqueado\r\n        if (timer === 0 && isBlocked) {\r\n            // Desbloquea al usuario y restablece los intentos\r\n            setIsBlocked(false);\r\n            setAttempts(0);\r\n        }\r\n    \r\n        // Limpia el intervalo cuando el efecto se desmonta o se actualiza\r\n        return () => {\r\n            if (interval) clearInterval(interval);\r\n        };\r\n    }, [isBlocked, timer]);\r\n    \r\n    const handleRecaptchaChange = (token: string | null) => {\r\n        setRecaptchaToken(token);\r\n    };\r\n\r\n    const handleSubmit = async (\r\n        e: React.FormEvent<HTMLFormElement>,\r\n        usuarioRef: React.RefObject<HTMLInputElement>,\r\n        contrasegnaRef: React.RefObject<HTMLInputElement>,\r\n        recaptchaRef: React.RefObject<ReCAPTCHA>\r\n    ) => {\r\n        \r\n        e.preventDefault();\r\n        const form = e.currentTarget;\r\n\r\n        if (attempts < maxAttempts) {\r\n            if (!form.checkValidity()) {\r\n                e.stopPropagation();\r\n                setValidated(false);\r\n                return;\r\n            }\r\n\r\n            if (!recaptchaToken) {\r\n                e.stopPropagation();\r\n                setError(\"Por favor, completa el reCAPTCHA\");\r\n                return;\r\n            }\r\n\r\n            setError(null);\r\n            setValidated(true);\r\n\r\n            const username = usuarioRef.current?.value;\r\n            const password = contrasegnaRef.current?.value;\r\n\r\n            if (username && password) {\r\n\r\n                try {\r\n\r\n                    const data = await toast.promise(\r\n                        \r\n                        InicioSesionRequest(username, password, recaptchaToken),\r\n\r\n                        {\r\n                            pending: \"Ingresando...\",\r\n                            success: {\r\n                                render({ data }) {\r\n                                    alert('estoy aquí');\r\n                                    if (data.status === 200) {\r\n                                        setTimeout(() => {\r\n                                            window.location.href = \"./\";\r\n                                        }, 1000);\r\n                                        return \"¡Ingreso exitoso!\";\r\n                                    }\r\n                                    throw new Error(\"Error en la respuesta del servidor\");\r\n                                },\r\n                            },\r\n                            error: {\r\n                                render() {\r\n                                    setValidated(false);\r\n                                    setError(\"Error durante el ingreso\");\r\n                                    return \"Error durante el ingreso.\";\r\n                                },\r\n                            },\r\n                        },\r\n\r\n                        {\r\n                            position: \"bottom-right\",\r\n                            className: \"foo-bar\",\r\n                            hideProgressBar: true,\r\n                        }\r\n\r\n                    );\r\n\r\n                    if (data.access_token) {\r\n                        localStorage.setItem(\"access_token\", data.access_token);\r\n                    } else {\r\n                        setAttempts((prevAttempts) => prevAttempts + 1);\r\n                        setError(\"Credenciales incorrectas\");\r\n                    }\r\n\r\n                } catch (err) {\r\n                    if (err instanceof Error) {\r\n                        setError(err.message);\r\n                    } else {\r\n                        setError(\"Error desconocido\");\r\n                    }\r\n                    recaptchaRef.current?.reset();\r\n\r\n                } finally {\r\n                    if (attempts + 1 >= maxAttempts) {\r\n                        setIsBlocked(true);\r\n                        setTimer(blockTime);\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                setError(\"Usuario o contraseña no pueden estar vacíos\");\r\n            }\r\n\r\n        } else {\r\n            setIsBlocked(true);\r\n            setTimer(blockTime);\r\n        }\r\n\r\n    };\r\n\r\n    return { recaptchaToken, validated, error, attempts, isBlocked, timer, handleRecaptchaChange, handleSubmit };\r\n\r\n};"]}