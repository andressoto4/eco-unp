{"version":3,"file":"InicioSesionHook.js","sourceRoot":"","sources":["../../../ui/hooks/InicioSesionHook.tsx"],"names":[],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport { InicioSesionRequest } from \"../request/InicisoSesionRequest\";\r\n\r\nexport const InicioSesionHook = (maxAttempts: number, blockTime: number) => {\r\n  const [recaptchaToken, setRecaptchaToken] = useState<string | null>(null);\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [attempts, setAttempts] = useState<number>(0);\r\n  const [isBlocked, setIsBlocked] = useState<boolean>(false);\r\n  const [timer, setTimer] = useState<number>(0);\r\n\r\n  useEffect(() => {\r\n    let interval: NodeJS.Timeout | undefined;\r\n\r\n    // Si el usuario está bloqueado y el temporizador es mayor que 0\r\n    if (isBlocked && timer > 0) {\r\n      // Configura un intervalo que decrementa el temporizador en 1 cada segundo\r\n      interval = setInterval(() => {\r\n        setTimer((prevTimer) => prevTimer - 1);\r\n      }, 1000);\r\n    }\r\n\r\n    // Si el temporizador llega a 0 y el usuario está bloqueado\r\n    if (timer === 0 && isBlocked) {\r\n      // Desbloquea al usuario y restablece los intentos\r\n      setIsBlocked(false);\r\n      setAttempts(0);\r\n    }\r\n\r\n    // Limpia el intervalo cuando el efecto se desmonta o se actualiza\r\n    return () => {\r\n      if (interval) clearInterval(interval);\r\n    };\r\n  }, [isBlocked, timer]);\r\n\r\n  const handleRecaptchaChange = (token: string | null) => {\r\n    setRecaptchaToken(token);\r\n  };\r\n\r\n  const handleSubmit = async (\r\n    e: React.FormEvent<HTMLFormElement>,\r\n    usuarioRef: React.RefObject<HTMLInputElement>,\r\n    contrasegnaRef: React.RefObject<HTMLInputElement>,\r\n    recaptchaRef: React.RefObject<ReCAPTCHA>\r\n  ) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n\r\n    if (attempts < maxAttempts) {\r\n      if (!form.checkValidity()) {\r\n        console.log(form.checkValidity());\r\n\r\n        e.stopPropagation();\r\n        setValidated(false);\r\n        toast.error(\"Formulario no valido\", {\r\n          position: \"top-right\",\r\n          className: \"foo-bar\",\r\n          hideProgressBar: true,\r\n        });\r\n        return;\r\n      }\r\n\r\n      if (!recaptchaToken) {\r\n        e.stopPropagation();\r\n        toast.error(\"Por favor, completa el reCAPTCHA\", {\r\n          position: \"top-right\",\r\n          className: \"foo-bar\",\r\n          hideProgressBar: true,\r\n        });\r\n        return;\r\n      }\r\n\r\n      setValidated(true);\r\n\r\n      const username = usuarioRef.current?.value;\r\n      const password = contrasegnaRef.current?.value;\r\n\r\n      if (username && password) {\r\n        try {\r\n          await toast.promise(\r\n            InicioSesionRequest(username, password, recaptchaToken),\r\n            {\r\n              pending: \"Ingresando...\",\r\n              success: {\r\n                render({ data }) {\r\n                  localStorage.setItem(\"access_token\", data.access_token);\r\n                  setTimeout(() => {\r\n                    window.location.href = \"./\";\r\n                  }, 1000);\r\n                  return \"¡Ingreso exitoso!\";\r\n                },\r\n              },\r\n              error: {\r\n                render({ data }) {\r\n                  setValidated(false);\r\n                  setAttempts((prevAttempts) => prevAttempts + 1);\r\n                  recaptchaRef.current?.reset();\r\n                  // Typescript genera un error de tipos pero es por la libreria de toastify no esta hecha en ts\r\n                  return data.message;\r\n                },\r\n              },\r\n            },\r\n            {\r\n              position: \"top-right\",\r\n              className: \"foo-bar\",\r\n              hideProgressBar: true,\r\n            }\r\n          );\r\n        } catch (err) {\r\n          toast.error(\"Hubo un error\", {\r\n            position: \"top-right\",\r\n            className: \"foo-bar\",\r\n            hideProgressBar: true,\r\n          });\r\n\r\n          recaptchaRef.current?.reset();\r\n        } finally {\r\n          if (attempts + 1 >= maxAttempts) {\r\n            setIsBlocked(true);\r\n            setTimer(blockTime);\r\n          }\r\n        }\r\n      } else {\r\n        toast.error(\"Usuario o contraseña no pueden estar vacíos\", {\r\n          position: \"top-right\",\r\n          className: \"foo-bar\",\r\n          hideProgressBar: true,\r\n        });\r\n      }\r\n    } else {\r\n      setIsBlocked(true);\r\n      setTimer(blockTime);\r\n    }\r\n  };\r\n\r\n  return {\r\n    recaptchaToken,\r\n    validated,\r\n    attempts,\r\n    isBlocked,\r\n    timer,\r\n    handleRecaptchaChange,\r\n    handleSubmit,\r\n  };\r\n};\r\n"]}